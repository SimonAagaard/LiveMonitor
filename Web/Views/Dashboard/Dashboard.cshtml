@model Data.Entities.Dashboard

@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<div class="row">
    <div class="col-md-6">
        <div id="chart1" class="chart"></div>
    </div>
    <div class="col-md-6">
        <div id="chart2" class="chart"></div>
    </div>
    <div class="col-md-6">
        <div id="chart3" class="chart"></div>
    </div>
    <div class="col-md-6">
        <div id="chart4" class="chart"></div>
    </div>
</div>

<style scoped>
    .chart {
        width: 100%;
        min-height: 600px;
    }

    .row {
        margin: 0 !important;
    }

    .container, .container-sm, .container-md, .container-lg, .container-xl {
        max-width: 100%
    }
</style>
@section scripts{
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    @*Should most likely host it locally instead of using CDN, but this was quick n dirty :pregnantWoman:*@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.js" integrity="sha256-H9jAz//QLkDOy/nzE9G4aYijQtkLt9FvGmdUTwBk6gs=" crossorigin="anonymous"></script>
    <script>
        //Default values for white theme
        var color = 'grey';
        var backgroundColor = '#ffffff';
        var lineColor = '#3366cc';
        var lastTimeStamp = new Date().setMinutes(-1);
        document.getElementById("darkBtn").addEventListener("click", setDashboardStyleFromCookie);
        document.getElementById("lightBtn").addEventListener("click", setDashboardStyleFromCookie);
        window.onload = setDashboardStyleFromCookie();
        function setDashboardStyleFromCookie() {
            var cssTitle = getCookie(styleCookieName);

            if (cssTitle == 'light' || cssTitle == null) {
                document.getElementById('darkBtn').style.display = 'block';
                document.getElementById('lightBtn').style.display = 'none';
                document.getElementById('title').style.color = 'grey';
            }
            //Dark theme overrides the values on variables
            else {
                color = '#ffffff';
                backgroundColor = '#222';
                lineColor = '#0ffc4b';
                document.getElementById('lightBtn').style.display = 'block';
                document.getElementById('darkBtn').style.display = 'none';
                document.getElementById('title').style.color = '#ffffff';
            }

            if (cssTitle != null) {
                switchStyle(cssTitle);
            }
        }
    </script>

    <script>
        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(callback);


        function callback() {
            //Style choices for the chart
            var option = {
                width: 900,
                height: 650,
                legend: { position: 'top', alignment: 'start' },
                legendTextStyle: {
                    color: color,
                    fontSize: 24,
                    bold: true
                },
                //Horizontal axis styling
                hAxis: {
                    title: '@Model.DashboardSetting.XLabel', //Use x-label here from dashboardsSettings
                    titleTextStyle: {
                        color: color,
                        fontSize: 24,
                        bold: true
                    },
                    format: 'HH:mm',
                    textStyle: {
                        color: color
                    },
                },
                //Vertical axis styling
                vAxis: {
                    title: '@Model.DashboardSetting.YLabel', //Use y-label here from dashboardsSettings
                    titleTextStyle: {
                        color: color,
                        fontSize: 24,
                        bold: true
                    },
                    baselineColor: 'transparent',
                    viewWindow: {
                        min: 0
                    },

                    textStyle: {
                        color: color
                    },
                },
                backgroundColor: backgroundColor,
                //Line color
                series: {
                    0: { color: lineColor },
                },

                chartArea: {
                    //Determines how much of the container to fill out
                    height: '80%', width: '85%', left: 100,
                    backgroundColor: { stroke: "gray", strokeWidth: 1 }
                },
            };

            //Determines what chart type to be rendered, based on the users choice
            switch (@Model.DashboardSetting.DashboardTypeValue)
            {
                case 1:
                    var chart1 = new google.visualization.LineChart(document.getElementById('chart1'));
                    var chart2 = new google.visualization.LineChart(document.getElementById('chart2'));
                    var chart3 = new google.visualization.LineChart(document.getElementById('chart3'));
                    var chart4 = new google.visualization.LineChart(document.getElementById('chart4'));
                    break;
                case 2:
                    var chart1 = new google.visualization.AreaChart(document.getElementById('chart1'));
                    break;
                case 3:
                    var chart1 = new google.visualization.PieChart(document.getElementById('chart1'));
                    break;
                default:
                    var chart1 = new google.visualization.LineChart(document.getElementById('chart1'));
                    break;
            }

            var data1 = new google.visualization.DataTable();
            data1.addColumn('datetime', 'TimeStamp');
            data1.addColumn('number', 'Value');

            var data2 = new google.visualization.DataTable();
            data2.addColumn('datetime', 'TimeStamp');
            data2.addColumn('number', 'Value');

            var data3 = new google.visualization.DataTable();
            data3.addColumn('datetime', 'TimeStamp');
            data3.addColumn('number', 'Value');

            var data4 = new google.visualization.DataTable();
            data4.addColumn('datetime', 'TimeStamp');
            data4.addColumn('number', 'Value');


            fillDashboard(data1, chart1);
            fillDashboard(data2, chart2);
            fillDashboard(data3, chart3);
            fillDashboard(data4, chart4);
            drawChart(data1, chart1,data2, chart2, data3, chart3, data4, chart4);

            //Update speed is controlled here should be the refreshrate property in the future
            //setInterval(drawChart, 5000);
            setInterval(drawChart, @Model.DashboardSetting.RefreshRate * 1000, data1, chart1,  data2, chart2, data3, chart3, data4, chart4);


            function drawChart(data1, chart1, data2, chart2, data3, chart3, data4, chart4) {
                $.get('GetNewestDataSet', integrationSettingId = 'integrationSettingId=854c79b2-6b31-472c-938f-f1077343aac0', function (dataSet) {
                    var timeStamp = new Date(dataSet.xValue);
                    var time = { v: timeStamp, f: moment(timeStamp).format('HH:mm') };
                    var val = dataSet.yValue;

                    //Checks if the new data is of a newer set then the last, based on the time it was made
                    if (timeStamp > lastTimeStamp) {
                        data1.addRow([time, val]);

                        //The hard coded "100" should be the amountofdatasetsfordashboard property in the future
                        if (data1.getNumberOfRows() > 100) {
                        data1.removeRow(0);
                        }

                        lastTimeStamp = new Date(timeStamp);
                        chart1.draw(data1, option);

                        data2.addRow([time, val]);
                        if (data2.getNumberOfRows() > 100) {
                        data2.removeRow(0);
                        }
                        chart2.draw(data2, option);

                        data3.addRow([time, val]);
                        if (data3.getNumberOfRows() > 100) {
                        data3.removeRow(0);
                        }
                        chart3.draw(data3, option);

                        data4.addRow([time, val]);
                        if (data4.getNumberOfRows() > 100) {
                        data4.removeRow(0);
                        }
                        chart4.draw(data4, option);
                    }
                });
            }

            //Fills the dashboard with latest entries/datasets
            function fillDashboard(dataTable, gChart) {
                $.get('GetNewestDataSets', { integrationSettingId: '854c79b2-6b31-472c-938f-f1077343aac0', amountOfDataSets: '100'  }, function (dataSets) {
                    for (var i = 0; i < dataSets.length; i++) {
                        var itemxyz = dataSets[i];

                        var timeStamp = new Date(itemxyz.xValue);
                        var time = { v: timeStamp, f: moment(timeStamp).format('HH:mm') };
                        var val = itemxyz.yValue;

                        dataTable.addRow([time, val]);
                        if (dataTable.getNumberOfRows() >= dataSets.length) {
                            dataTable.removeRow(0);
                        }
                    }
                    setInterval(gChart.draw(dataTable, option), @Model.DashboardSetting.RefreshRate * 1000);
                });
            }
        }
    </script>
}